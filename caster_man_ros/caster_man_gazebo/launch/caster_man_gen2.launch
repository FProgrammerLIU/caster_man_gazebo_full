<?xml version = "1.0" encoding = "UTF-8"?>
<launch> 

  <arg name="kinova_robotType" default="j2s6s300"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="world_name" value="$(find caster_man_gazebo)/worlds/caster_home.world"/> 
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="use_trajectory_controller" default="true"/>
  <arg name="is7dof" default="false"/>

  <group>
    <remap from="joint_states" to="caster/joint_states" />
    <include file="$(find gazebo_ros)/launch/empty_world.launch">   
      <arg name="world_name" value="$(arg world_name)"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="gui" value="$(arg gui)"/>   
      <arg name="paused" value="$(arg paused)"/>   
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>   
      <arg name="headless" value="$(arg headless)"/>    
    </include>
  </group>

  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find caster_man_description)/urdf/caster_man_$(arg kinova_robotType)_xacro.xacro" />

  <!-- For the 6DOF -->
  <node name="spawn_table" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" unless="$(arg is7dof)"
    args="-urdf -model caster_$(arg kinova_robotName) -param robot_description" />

  <!-- For the 7DOF -->
<!--   <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" if="$(arg is7dof)"
    args="-urdf -model $(arg kinova_robotName) -param robot_description
        -J $(arg kinova_robotType)_joint_1 0.0
        -J $(arg kinova_robotType)_joint_2 2.9
        -J $(arg kinova_robotType)_joint_3 0.0
        -J $(arg kinova_robotType)_joint_4 1.3
        -J $(arg kinova_robotType)_joint_5 -2.07
        -J $(arg kinova_robotType)_joint_6 1.4
        -J $(arg kinova_robotType)_joint_7 0.0
        -J $(arg kinova_robotType)_joint_finger_1 1.0
        -J $(arg kinova_robotType)_joint_finger_2 1.0
        -J $(arg kinova_robotType)_joint_finger_3 1.0" /> -->
  
  <!-- Load controller configuration -->
  <rosparam file="$(find caster_man_gazebo)/controller/caster_man_$(arg kinova_robotType)_control.yaml" command="load"/>

   <group unless="$(arg use_trajectory_controller)">
    <group unless="$(arg is7dof)">
      <node name="$(arg kinova_robotName)_joints_controller" pkg="controller_manager" type="spawner" respawn="false"
        output="screen"
       args="joint_state_controller caster_velocity_controller yaw_position_controller pitch_position_controller body_position_controller
               joint_1_position_controller joint_2_position_controller  
               joint_3_position_controller joint_4_position_controller
               joint_5_position_controller joint_6_position_controller 
               finger_2_position_controller finger_1_position_controller 
               finger_3_position_controller finger_tip_1_position_controller
               finger_tip_2_position_controller finger_tip_3_position_controller"/> 
    </group>
    <group if="$(arg is7dof)">
      <node name="$(arg kinova_robotName)_joints_controller" pkg="controller_manager" type="spawner" respawn="false"
        output="screen"
       args="joint_state_controller caster_velocity_controller yaw_position_controller pitch_position_controller body_position_controller
               joint_1_position_controller joint_2_position_controller
               joint_3_position_controller joint_4_position_controller
               joint_5_position_controller joint_6_position_controller joint_7_position_controller
               finger_2_position_controller finger_1_position_controller 
               finger_3_position_controller finger_tip_1_position_controller
               finger_tip_2_position_controller finger_tip_3_position_controller"/> 
    </group>
  </group>

<!--   <group if="$(arg use_trajectory_controller)">
    <node name="$(arg kinova_robotName)_trajectory_controller" pkg="controller_manager" type="spawner" respawn="false"
      output="screen"
      args="joint_state_controller caster_velocity_controller yaw_position_controller pitch_position_controller body_position_controller
      effort_joint_trajectory_controller
      effort_finger_trajectory_controller
      finger_tip_1_position_controller
      finger_tip_2_position_controller 
      finger_tip_3_position_controller"/>
  </group> -->
  <group if="$(arg use_trajectory_controller)">
    <node name="$(arg kinova_robotName)_trajectory_controller" pkg="controller_manager" type="spawner" respawn="false"
      output="screen"
      args="joint_state_controller caster_velocity_controller position_finger_trajectory_controller
      position_joint_trajectory_controller body_position_controller finger_tip_1_position_controller
      finger_tip_2_position_controller 
      finger_tip_3_position_controller"/>
  </group>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">[caster/joint_states]</rosparam>
  </node>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="50.0"/>
  </node>
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find caster_viz)/viz/model.rviz" /> -->

<!--   <node name="command_robot_home_pose" pkg="kinova_control" type="move_robot.py"
        respawn="false" output="screen" args="$(arg kinova_robotType)">       
  </node> -->

</launch>